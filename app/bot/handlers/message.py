from functools import wraps

from aiogram.dispatcher.router import Router
from aiogram.filters import CommandStart
from aiogram import F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from db.services.sessions import SessionsService, Session
from ..keyboards import MAIN_MENU_KB, APPROVE_KB
from ..states.forms import SessionForm

router = Router(name=__name__)


def db_service_provider(func):
    @wraps(func)
    async def wrapped(*args, **kwargs):
        service = SessionsService()
        return await func(*args, **kwargs, service=service)

    return wrapped


@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()

    await message.reply(text="üè†–ú–µ–Ω—é –ü–∞—Ä—Å–µ—Ä–∞", reply_markup=MAIN_MENU_KB)


@router.message(F.text == "üî•–ù–æ–≤—ã–π –°–µ–∞–Ω—Å")
async def new_session(message: Message, state: FSMContext):
    await state.set_state(state=SessionForm.set_count_complete_requests)

    await message.reply(
        text="–ö–∞–∫–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –∑–∞—è–≤–æ–∫\n<b>—Å –∑–∞–∫—É–ø–æ–º –±–∏–ª–µ—Ç–∞</b>",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(SessionForm.set_count_complete_requests)
async def set_count_requests(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.reply(text="–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n<i>–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "
                                 "—Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º</i>")
        return

    count = abs(int(message.text))
    await state.set_data(data={"count_requests": count})
    await state.set_state(SessionForm.set_ref_link)

    await message.reply(
        text="<b>–û—Ç–ª–∏—á–Ω–æ</b>, —Ç–µ–ø–µ—Ä—å —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞:"
    )


@router.message(SessionForm.set_ref_link)
async def process_ref_link(message: Message, state: FSMContext):
    ref_link = message.text

    if (not ref_link.startswith("https://")) or (" " in ref_link):
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n<i>–Ω—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞</i>")
        return

    current_session_form = dict(await state.get_data())
    await state.set_data(data=current_session_form | {"ref_link": ref_link})
    await state.set_state(state=SessionForm.set_bank_number)

    await message.reply(
        text="–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:"
    )


@router.message(SessionForm.set_bank_number)
async def set_phone(message: Message, state: FSMContext):
    number = message.text.replace(" ", "")

    if len(number) not in (11, 12, 10):
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

    current_session_form = dict(await state.get_data())

    await state.set_data(
        data=current_session_form | {"phone_number": number[-10:]}
    )

    await state.set_state(state=SessionForm.approve_session)

    await message.reply(
        text="‚úÖ –û—Ç–ª–∏—á–Ω–æ, —Ñ–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!\n"
             f"| –ö–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: "
             f"{current_session_form.get("count_requests")}\n"
             f"| –†–µ—Ñ. —Å—Å—ã–ª–∫–∞: <code>"
             f"{current_session_form.get("ref_link")}</code>\n"
             f"| –ù–æ–º–µ—Ä: <code>{number[-10:]}</code>\n",
        reply_markup=APPROVE_KB
    )


@router.message(SessionForm.approve_session)
@db_service_provider
async def approve_session(
        message: Message, state: FSMContext, service: SessionsService):
    if message.text != "‚úÖ–ù–∞—á–∞—Ç—å —Å–µ–∞–Ω—Å":
        await message.reply("‚úÖ–û—Ç–º–µ–Ω–µ–Ω")
        await state.clear()
        return

    form = dict(await state.get_data())

    session = Session.from_dict(
        dict_=form
    )

    service.add(passed_session=session)

    await state.clear()

    replyed = await message.reply(
        text=f"‚úÖ <b>–°–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞</b>\n"
        "\n".join(
            [f"#{i} - ?" for i in range(session.count_requests)]
        )
    )


@router.message(F.text == "üìë–°–µ–∞–Ω—Å—ã")
@db_service_provider
async def get_all_sessions(message: Message, service: SessionsService):
    sessions: list[bytes] = service.get_all()

    if not sessions:
        await message.reply("‚ùå –°–µ—Å—Å–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ!")
        return

    sessions = [i.decode().split("@") for i in sessions]
    header = "<b>–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:</b>\n"
    table = "\n".join(
        ["\n".join((f"| <b>‚úÖ{s[0]} ‚ùå{s[1]}</b>",
                    f"| üåê{s[2]}",
                    f"| üìû<code>{s[-1]}</code>",
                    "‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî")) for s in sessions]
    )

    await message.reply(
        text=header + table
    )
