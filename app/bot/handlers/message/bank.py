from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from bot.states.forms import BankAccountLogin
from db.services.banking import BotBankingStatusService
from parser.banking import exceptions
from parser.banking.parser import BaseBankingParser
from .main import bank_service_provider, router


@router.message(F.text == "üí≥–î–æ–±–∞–≤–∏—Ç—å –±–∞–Ω–∫")
@bank_service_provider
async def authenticate_bank(
        message: Message,
        state: FSMContext,
        bank: BaseBankingParser):
    await state.set_state(BankAccountLogin.enter_phone)

    bank.reset()

    await message.reply(text="‚òé –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±–ª–∞–¥–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã\n\n"
                             "<i>—Ñ–æ—Ä–º–∞—Ç: 9952481751</i>")


@router.message(BankAccountLogin.enter_phone)
@bank_service_provider
async def enter_bank_phone(
        message: Message,
        state: FSMContext,
        bank: BaseBankingParser):
    phone = message.text.replace(" ", "")

    if not phone.isdigit():
        await message.reply(text="‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

    bank.add_phone(owner_phone=phone)

    await state.set_state(BankAccountLogin.enter_otp)

    reply = await message.reply("‚úÖ–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –∫–æ–¥ –∏–∑ —Å–º—Å")

    await state.set_data(data={"phone": phone})

    try:
        bank.send_login_request()
    except Exception as e:
        await reply.edit_text(f"‚ùå–û–®–ò–ë–ö–ê: {e}")
        await state.clear()


@router.message(BankAccountLogin.enter_otp)
@bank_service_provider
async def enter_otp_bank_code(
        message: Message,
        state: FSMContext,
        bank: BaseBankingParser):
    reply = await message.reply("‚úÖ–ü—Ä–∏–Ω—è—Ç–æ, –æ–∂–∏–¥–∞–π—Ç–µ")

    try:
        bank.enter_otp_code(code=message.text.replace(" ", ""))
    except exceptions.ReEnterOtp:
        await message.reply("üîÑ–í–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥")
        return
    except exceptions.CardNumberEnterRequired:
        pass
    except exceptions.PasswordEnterRequired:
        try:
            bank.no_password_way()
        except exceptions.CardNumberEnterRequired:
            pass
    except (Exception, BaseException) as e:
        await reply.edit_text(f"‚ùå–û–®–ò–ë–ö–ê: {e}")
    else:
        await message.reply("‚úÖ–û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –±—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –ø–æ –ø–∏–Ω–∫–æ–¥—É!")
        return await state.clear()

    await message.reply("üí≥–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª—é–±–æ–π –∫–∞—Ä—Ç—ã —Ç-–±–∞–Ω–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤")

    await state.set_state(state=BankAccountLogin.enter_card)


@router.message(BankAccountLogin.enter_card)
@bank_service_provider
async def enter_bank_card(
        message: Message,
        state: FSMContext,
        bank: BaseBankingParser):
    reply = await message.reply("‚úÖ–ü—Ä–∏–Ω—è—Ç–æ, –æ–∂–∏–¥–∞–π—Ç–µ")

    try:
        bank.enter_card_number(number=message.text.replace(" ", ""))
    except Exception as e:
        await reply.edit_text(f"‚ùå–û–®–ò–ë–ö–ê: {e}")

    phone = dict(await state.get_data()).get("phone")

    await state.clear()

    await message.reply("‚úÖ–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ")

    if await bank.authenticated:
        await message.reply("üîó–ë–∞–Ω–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω\n\n"
                            "<i>–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞ –±—É–¥–µ—Ç "
                            "–¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∑–∂–µ</i>")

        BotBankingStatusService().authenticated(
            phone=phone
        )
    else:
        await message.reply(f"‚ùå–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –±–∞–Ω–∫–∏–Ω–≥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
