from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from bot.keyboards import APPROVE_KB, EMPTY_KB
from bot.states.forms import SessionForm
from db.services.banking import BotBankingStatusService
from db.services.sessions import SessionsService, Session
from parser.services import PlatformLeadsService
from .main import db_service_provider, router, start


@router.message(F.text == "üî•–ù–æ–≤—ã–π –°–µ–∞–Ω—Å")
async def new_session(message: Message, state: FSMContext):
    await state.set_state(state=SessionForm.set_count_complete_requests)

    await message.reply(
        text="–ö–∞–∫–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –∑–∞—è–≤–æ–∫\n<b>—Å –∑–∞–∫—É–ø–æ–º –±–∏–ª–µ—Ç–∞</b>"
             "\n\n<i>–≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è</i>",
        reply_markup=EMPTY_KB
    )


@router.message(SessionForm.set_count_complete_requests)
async def set_count_requests(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.reply(text="–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n<i>–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "
                                 "—Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º</i>")
        return

    count = abs(int(message.text))
    await state.set_data(data={"count_requests": count})
    await state.set_state(SessionForm.set_ref_link)

    await message.reply(
        text="<b>–û—Ç–ª–∏—á–Ω–æ</b>, —Ç–µ–ø–µ—Ä—å —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞:"
    )


@router.message(SessionForm.set_ref_link)
async def process_ref_link(message: Message, state: FSMContext):
    ref_link = message.text

    if (not ref_link.startswith("https://")) or (" " in ref_link):
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n<i>–Ω—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞</i>")
        return

    current_session_form = dict(await state.get_data())
    await state.set_data(data=current_session_form | {"ref_link": ref_link})
    await state.set_state(state=SessionForm.approve_session)

    await message.reply(
        text="‚úÖ –û—Ç–ª–∏—á–Ω–æ, —Ñ–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!\n"
             f"| –ö–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: "
             f"{current_session_form.get("count_requests")}\n"
             f"| –†–µ—Ñ. —Å—Å—ã–ª–∫–∞: <code>"
             f"{ref_link}</code>\n",
        reply_markup=APPROVE_KB
    )


@router.message(SessionForm.approve_session)
@db_service_provider
async def approve_session(
        message: Message, state: FSMContext, service: SessionsService
):
    if message.text != "‚úÖ–ù–∞—á–∞—Ç—å —Å–µ–∞–Ω—Å":
        await message.reply("‚úÖ–û—Ç–º–µ–Ω–µ–Ω")
        await state.clear()
        return

    form = dict(await state.get_data())

    session = Session.from_dict(
        dict_=form | {"phone_number": BotBankingStatusService().get_number()}
    )

    session_id = service.add(passed_session=session)

    await state.clear()

    replyed = await message.reply(
        text=f"‚úÖ<b>–°–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –Ω–∏–∂–µ</b>\n\n"
             f"<i>–æ–∫–æ–ª–æ 5 –º–∏–Ω. –Ω–∞ –ª–∏–¥</i>"
    )

    try:
        async for gen in PlatformLeadsService().mass_generate(
            ref_link=session.ref_link,
            count=int(session.count_requests)
        ):
            replyed = await replyed.edit_text(text=replyed.text + "\n" + gen)
    except BaseException as e:
        await replyed.edit_text(
            text="‚ùå <b>–°–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–∞–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π</b>\n\n"
                 f"<code>{e}</code>",
        )
    else:
        service.update_successed_count(session_id=session_id,
                                       count=session.count_successed)

        await start(message=message, state=state)


@router.message(F.text == "üìë–°–µ–∞–Ω—Å—ã")
@db_service_provider
async def get_all_sessions(message: Message, service: SessionsService):
    sessions: list[bytes] = service.get_all()

    if not sessions:
        await message.reply("‚ùå –°–µ—Å—Å–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ!")
        return

    sessions = [i.decode().split("@") for i in sessions]
    header = "<b>–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:</b>\n"
    table = "\n".join(
        ["\n".join((f"| <b>‚úÖ{s[0]} ‚ùå{s[1]}</b>",
                    f"| üåê{s[2]}",
                    f"| üìû<code>{s[-1]}</code>",
                    "‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî")) for s in sessions]
    )

    await message.reply(
        text=header + table
    )
